// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tunnel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Dolittle.Runtime.Events.Relativity {

  /// <summary>Holder for reflection information generated from tunnel.proto</summary>
  public static partial class TunnelReflection {

    #region Descriptor
    /// <summary>File descriptor for tunnel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TunnelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgx0dW5uZWwucHJvdG8SCnJlbGF0aXZpdHkaGWdvb2dsZS9wcm90b2J1Zi9h",
            "bnkucHJvdG8iMQoPQXJ0aWZhY3RNZXNzYWdlEgoKAmlkGAEgASgMEhIKCmdl",
            "bmVyYXRpb24YAiABKAUifQoRT3BlblR1bm5lbE1lc3NhZ2USEwoLYXBwbGlj",
            "YXRpb24YASABKAwSFgoOYm91bmRlZENvbnRleHQYAiABKAwSDgoGb2Zmc2V0",
            "GAMgASgEEisKBmV2ZW50cxgEIAMoCzIbLnJlbGF0aXZpdHkuQXJ0aWZhY3RN",
            "ZXNzYWdlIj0KGUV2ZW50U291cmNlVmVyc2lvbk1lc3NhZ2USDgoGY29tbWl0",
            "GAEgASgEEhAKCHNlcXVlbmNlGAIgASgNInwKG1ZlcnNpb25lZEV2ZW50U291",
            "cmNlTWVzc2FnZRI2Cgd2ZXJzaW9uGAEgASgLMiUucmVsYXRpdml0eS5FdmVu",
            "dFNvdXJjZVZlcnNpb25NZXNzYWdlEhMKC2V2ZW50U291cmNlGAIgASgMEhAK",
            "CGFydGlmYWN0GAMgASgMIrkBChRFdmVudE1ldGFkYXRhTWVzc2FnZRI3CgZz",
            "b3VyY2UYASABKAsyJy5yZWxhdGl2aXR5LlZlcnNpb25lZEV2ZW50U291cmNl",
            "TWVzc2FnZRIVCg1jb3JyZWxhdGlvbklkGAIgASgMEi0KCGFydGlmYWN0GAMg",
            "ASgLMhsucmVsYXRpdml0eS5BcnRpZmFjdE1lc3NhZ2USEAoIY2F1c2VkQnkY",
            "BCABKAkSEAoIb2NjdXJyZWQYBSABKAMi1gEKFEV2ZW50UGFydGljbGVNZXNz",
            "YWdlEgoKAmlkGAEgASgMEjIKCG1ldGFkYXRhGAIgASgLMiAucmVsYXRpdml0",
            "eS5FdmVudE1ldGFkYXRhTWVzc2FnZRI6CgVldmVudBgDIAMoCzIrLnJlbGF0",
            "aXZpdHkuRXZlbnRQYXJ0aWNsZU1lc3NhZ2UuRXZlbnRFbnRyeRpCCgpFdmVu",
            "dEVudHJ5EgsKA2tleRgBIAEoCRIjCgV2YWx1ZRgCIAEoCzIULmdvb2dsZS5w",
            "cm90b2J1Zi5Bbnk6AjgBIugBCiNDb21taXR0ZWRFdmVudFN0cmVhbVBhcnRp",
            "Y2xlTWVzc2FnZRIOCgZ0ZW5hbnQYASABKAwSNwoGc291cmNlGAIgASgLMicu",
            "cmVsYXRpdml0eS5WZXJzaW9uZWRFdmVudFNvdXJjZU1lc3NhZ2USEAoIc2Vx",
            "dWVuY2UYAyABKAQSCgoCaWQYBCABKAwSEQoJdGltZVN0YW1wGAUgASgDEhUK",
            "DWNvcnJlbGF0aW9uSWQYBiABKAwSMAoGZXZlbnRzGAcgAygLMiAucmVsYXRp",
            "dml0eS5FdmVudFBhcnRpY2xlTWVzc2FnZTJyChRRdWFudHVtVHVubmVsU2Vy",
            "dmljZRJaCgRPcGVuEh0ucmVsYXRpdml0eS5PcGVuVHVubmVsTWVzc2FnZRov",
            "LnJlbGF0aXZpdHkuQ29tbWl0dGVkRXZlbnRTdHJlYW1QYXJ0aWNsZU1lc3Nh",
            "Z2UiADABQiWqAiJEb2xpdHRsZS5SdW50aW1lLkV2ZW50cy5SZWxhdGl2aXR5",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Dolittle.Runtime.Events.Relativity.ArtifactMessage), global::Dolittle.Runtime.Events.Relativity.ArtifactMessage.Parser, new[]{ "Id", "Generation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dolittle.Runtime.Events.Relativity.OpenTunnelMessage), global::Dolittle.Runtime.Events.Relativity.OpenTunnelMessage.Parser, new[]{ "Application", "BoundedContext", "Offset", "Events" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dolittle.Runtime.Events.Relativity.EventSourceVersionMessage), global::Dolittle.Runtime.Events.Relativity.EventSourceVersionMessage.Parser, new[]{ "Commit", "Sequence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dolittle.Runtime.Events.Relativity.VersionedEventSourceMessage), global::Dolittle.Runtime.Events.Relativity.VersionedEventSourceMessage.Parser, new[]{ "Version", "EventSource", "Artifact" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dolittle.Runtime.Events.Relativity.EventMetadataMessage), global::Dolittle.Runtime.Events.Relativity.EventMetadataMessage.Parser, new[]{ "Source", "CorrelationId", "Artifact", "CausedBy", "Occurred" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dolittle.Runtime.Events.Relativity.EventParticleMessage), global::Dolittle.Runtime.Events.Relativity.EventParticleMessage.Parser, new[]{ "Id", "Metadata", "Event" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dolittle.Runtime.Events.Relativity.CommittedEventStreamParticleMessage), global::Dolittle.Runtime.Events.Relativity.CommittedEventStreamParticleMessage.Parser, new[]{ "Tenant", "Source", "Sequence", "Id", "TimeStamp", "CorrelationId", "Events" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ArtifactMessage : pb::IMessage<ArtifactMessage> {
    private static readonly pb::MessageParser<ArtifactMessage> _parser = new pb::MessageParser<ArtifactMessage>(() => new ArtifactMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArtifactMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dolittle.Runtime.Events.Relativity.TunnelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactMessage(ArtifactMessage other) : this() {
      id_ = other.id_;
      generation_ = other.generation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtifactMessage Clone() {
      return new ArtifactMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private pb::ByteString id_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "generation" field.</summary>
    public const int GenerationFieldNumber = 2;
    private int generation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Generation {
      get { return generation_; }
      set {
        generation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArtifactMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArtifactMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Generation != other.Generation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Generation != 0) hash ^= Generation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (Generation != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Generation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (Generation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Generation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArtifactMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Generation != 0) {
        Generation = other.Generation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 16: {
            Generation = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpenTunnelMessage : pb::IMessage<OpenTunnelMessage> {
    private static readonly pb::MessageParser<OpenTunnelMessage> _parser = new pb::MessageParser<OpenTunnelMessage>(() => new OpenTunnelMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenTunnelMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dolittle.Runtime.Events.Relativity.TunnelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenTunnelMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenTunnelMessage(OpenTunnelMessage other) : this() {
      application_ = other.application_;
      boundedContext_ = other.boundedContext_;
      offset_ = other.offset_;
      events_ = other.events_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenTunnelMessage Clone() {
      return new OpenTunnelMessage(this);
    }

    /// <summary>Field number for the "application" field.</summary>
    public const int ApplicationFieldNumber = 1;
    private pb::ByteString application_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Application {
      get { return application_; }
      set {
        application_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "boundedContext" field.</summary>
    public const int BoundedContextFieldNumber = 2;
    private pb::ByteString boundedContext_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BoundedContext {
      get { return boundedContext_; }
      set {
        boundedContext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 3;
    private ulong offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Dolittle.Runtime.Events.Relativity.ArtifactMessage> _repeated_events_codec
        = pb::FieldCodec.ForMessage(34, global::Dolittle.Runtime.Events.Relativity.ArtifactMessage.Parser);
    private readonly pbc::RepeatedField<global::Dolittle.Runtime.Events.Relativity.ArtifactMessage> events_ = new pbc::RepeatedField<global::Dolittle.Runtime.Events.Relativity.ArtifactMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dolittle.Runtime.Events.Relativity.ArtifactMessage> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenTunnelMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenTunnelMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Application != other.Application) return false;
      if (BoundedContext != other.BoundedContext) return false;
      if (Offset != other.Offset) return false;
      if(!events_.Equals(other.events_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Application.Length != 0) hash ^= Application.GetHashCode();
      if (BoundedContext.Length != 0) hash ^= BoundedContext.GetHashCode();
      if (Offset != 0UL) hash ^= Offset.GetHashCode();
      hash ^= events_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Application.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Application);
      }
      if (BoundedContext.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BoundedContext);
      }
      if (Offset != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Offset);
      }
      events_.WriteTo(output, _repeated_events_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Application.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Application);
      }
      if (BoundedContext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BoundedContext);
      }
      if (Offset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Offset);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenTunnelMessage other) {
      if (other == null) {
        return;
      }
      if (other.Application.Length != 0) {
        Application = other.Application;
      }
      if (other.BoundedContext.Length != 0) {
        BoundedContext = other.BoundedContext;
      }
      if (other.Offset != 0UL) {
        Offset = other.Offset;
      }
      events_.Add(other.events_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Application = input.ReadBytes();
            break;
          }
          case 18: {
            BoundedContext = input.ReadBytes();
            break;
          }
          case 24: {
            Offset = input.ReadUInt64();
            break;
          }
          case 34: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventSourceVersionMessage : pb::IMessage<EventSourceVersionMessage> {
    private static readonly pb::MessageParser<EventSourceVersionMessage> _parser = new pb::MessageParser<EventSourceVersionMessage>(() => new EventSourceVersionMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventSourceVersionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dolittle.Runtime.Events.Relativity.TunnelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSourceVersionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSourceVersionMessage(EventSourceVersionMessage other) : this() {
      commit_ = other.commit_;
      sequence_ = other.sequence_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventSourceVersionMessage Clone() {
      return new EventSourceVersionMessage(this);
    }

    /// <summary>Field number for the "commit" field.</summary>
    public const int CommitFieldNumber = 1;
    private ulong commit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Commit {
      get { return commit_; }
      set {
        commit_ = value;
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 2;
    private uint sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventSourceVersionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventSourceVersionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Commit != other.Commit) return false;
      if (Sequence != other.Sequence) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Commit != 0UL) hash ^= Commit.GetHashCode();
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Commit != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Commit);
      }
      if (Sequence != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Sequence);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Commit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Commit);
      }
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sequence);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventSourceVersionMessage other) {
      if (other == null) {
        return;
      }
      if (other.Commit != 0UL) {
        Commit = other.Commit;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Commit = input.ReadUInt64();
            break;
          }
          case 16: {
            Sequence = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VersionedEventSourceMessage : pb::IMessage<VersionedEventSourceMessage> {
    private static readonly pb::MessageParser<VersionedEventSourceMessage> _parser = new pb::MessageParser<VersionedEventSourceMessage>(() => new VersionedEventSourceMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionedEventSourceMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dolittle.Runtime.Events.Relativity.TunnelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionedEventSourceMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionedEventSourceMessage(VersionedEventSourceMessage other) : this() {
      Version = other.version_ != null ? other.Version.Clone() : null;
      eventSource_ = other.eventSource_;
      artifact_ = other.artifact_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionedEventSourceMessage Clone() {
      return new VersionedEventSourceMessage(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private global::Dolittle.Runtime.Events.Relativity.EventSourceVersionMessage version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Dolittle.Runtime.Events.Relativity.EventSourceVersionMessage Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "eventSource" field.</summary>
    public const int EventSourceFieldNumber = 2;
    private pb::ByteString eventSource_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EventSource {
      get { return eventSource_; }
      set {
        eventSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artifact" field.</summary>
    public const int ArtifactFieldNumber = 3;
    private pb::ByteString artifact_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Artifact {
      get { return artifact_; }
      set {
        artifact_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionedEventSourceMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionedEventSourceMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Version, other.Version)) return false;
      if (EventSource != other.EventSource) return false;
      if (Artifact != other.Artifact) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (version_ != null) hash ^= Version.GetHashCode();
      if (EventSource.Length != 0) hash ^= EventSource.GetHashCode();
      if (Artifact.Length != 0) hash ^= Artifact.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (version_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Version);
      }
      if (EventSource.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EventSource);
      }
      if (Artifact.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Artifact);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (EventSource.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EventSource);
      }
      if (Artifact.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Artifact);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionedEventSourceMessage other) {
      if (other == null) {
        return;
      }
      if (other.version_ != null) {
        if (version_ == null) {
          version_ = new global::Dolittle.Runtime.Events.Relativity.EventSourceVersionMessage();
        }
        Version.MergeFrom(other.Version);
      }
      if (other.EventSource.Length != 0) {
        EventSource = other.EventSource;
      }
      if (other.Artifact.Length != 0) {
        Artifact = other.Artifact;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (version_ == null) {
              version_ = new global::Dolittle.Runtime.Events.Relativity.EventSourceVersionMessage();
            }
            input.ReadMessage(version_);
            break;
          }
          case 18: {
            EventSource = input.ReadBytes();
            break;
          }
          case 26: {
            Artifact = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventMetadataMessage : pb::IMessage<EventMetadataMessage> {
    private static readonly pb::MessageParser<EventMetadataMessage> _parser = new pb::MessageParser<EventMetadataMessage>(() => new EventMetadataMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventMetadataMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dolittle.Runtime.Events.Relativity.TunnelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMetadataMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMetadataMessage(EventMetadataMessage other) : this() {
      Source = other.source_ != null ? other.Source.Clone() : null;
      correlationId_ = other.correlationId_;
      Artifact = other.artifact_ != null ? other.Artifact.Clone() : null;
      causedBy_ = other.causedBy_;
      occurred_ = other.occurred_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventMetadataMessage Clone() {
      return new EventMetadataMessage(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::Dolittle.Runtime.Events.Relativity.VersionedEventSourceMessage source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Dolittle.Runtime.Events.Relativity.VersionedEventSourceMessage Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 2;
    private pb::ByteString correlationId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artifact" field.</summary>
    public const int ArtifactFieldNumber = 3;
    private global::Dolittle.Runtime.Events.Relativity.ArtifactMessage artifact_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Dolittle.Runtime.Events.Relativity.ArtifactMessage Artifact {
      get { return artifact_; }
      set {
        artifact_ = value;
      }
    }

    /// <summary>Field number for the "causedBy" field.</summary>
    public const int CausedByFieldNumber = 4;
    private string causedBy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CausedBy {
      get { return causedBy_; }
      set {
        causedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occurred" field.</summary>
    public const int OccurredFieldNumber = 5;
    private long occurred_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Occurred {
      get { return occurred_; }
      set {
        occurred_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventMetadataMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventMetadataMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (CorrelationId != other.CorrelationId) return false;
      if (!object.Equals(Artifact, other.Artifact)) return false;
      if (CausedBy != other.CausedBy) return false;
      if (Occurred != other.Occurred) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      if (artifact_ != null) hash ^= Artifact.GetHashCode();
      if (CausedBy.Length != 0) hash ^= CausedBy.GetHashCode();
      if (Occurred != 0L) hash ^= Occurred.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CorrelationId);
      }
      if (artifact_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Artifact);
      }
      if (CausedBy.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CausedBy);
      }
      if (Occurred != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Occurred);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CorrelationId);
      }
      if (artifact_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Artifact);
      }
      if (CausedBy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CausedBy);
      }
      if (Occurred != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Occurred);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventMetadataMessage other) {
      if (other == null) {
        return;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::Dolittle.Runtime.Events.Relativity.VersionedEventSourceMessage();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      if (other.artifact_ != null) {
        if (artifact_ == null) {
          artifact_ = new global::Dolittle.Runtime.Events.Relativity.ArtifactMessage();
        }
        Artifact.MergeFrom(other.Artifact);
      }
      if (other.CausedBy.Length != 0) {
        CausedBy = other.CausedBy;
      }
      if (other.Occurred != 0L) {
        Occurred = other.Occurred;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (source_ == null) {
              source_ = new global::Dolittle.Runtime.Events.Relativity.VersionedEventSourceMessage();
            }
            input.ReadMessage(source_);
            break;
          }
          case 18: {
            CorrelationId = input.ReadBytes();
            break;
          }
          case 26: {
            if (artifact_ == null) {
              artifact_ = new global::Dolittle.Runtime.Events.Relativity.ArtifactMessage();
            }
            input.ReadMessage(artifact_);
            break;
          }
          case 34: {
            CausedBy = input.ReadString();
            break;
          }
          case 40: {
            Occurred = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventParticleMessage : pb::IMessage<EventParticleMessage> {
    private static readonly pb::MessageParser<EventParticleMessage> _parser = new pb::MessageParser<EventParticleMessage>(() => new EventParticleMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventParticleMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dolittle.Runtime.Events.Relativity.TunnelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventParticleMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventParticleMessage(EventParticleMessage other) : this() {
      id_ = other.id_;
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
      event_ = other.event_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventParticleMessage Clone() {
      return new EventParticleMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private pb::ByteString id_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 2;
    private global::Dolittle.Runtime.Events.Relativity.EventMetadataMessage metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Dolittle.Runtime.Events.Relativity.EventMetadataMessage Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_event_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 26);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> event_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Event {
      get { return event_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventParticleMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventParticleMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!Event.Equals(other.Event)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      hash ^= Event.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (metadata_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Metadata);
      }
      event_.WriteTo(output, _map_event_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      size += event_.CalculateSize(_map_event_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventParticleMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Dolittle.Runtime.Events.Relativity.EventMetadataMessage();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      event_.Add(other.event_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 18: {
            if (metadata_ == null) {
              metadata_ = new global::Dolittle.Runtime.Events.Relativity.EventMetadataMessage();
            }
            input.ReadMessage(metadata_);
            break;
          }
          case 26: {
            event_.AddEntriesFrom(input, _map_event_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommittedEventStreamParticleMessage : pb::IMessage<CommittedEventStreamParticleMessage> {
    private static readonly pb::MessageParser<CommittedEventStreamParticleMessage> _parser = new pb::MessageParser<CommittedEventStreamParticleMessage>(() => new CommittedEventStreamParticleMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommittedEventStreamParticleMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dolittle.Runtime.Events.Relativity.TunnelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommittedEventStreamParticleMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommittedEventStreamParticleMessage(CommittedEventStreamParticleMessage other) : this() {
      tenant_ = other.tenant_;
      Source = other.source_ != null ? other.Source.Clone() : null;
      sequence_ = other.sequence_;
      id_ = other.id_;
      timeStamp_ = other.timeStamp_;
      correlationId_ = other.correlationId_;
      events_ = other.events_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommittedEventStreamParticleMessage Clone() {
      return new CommittedEventStreamParticleMessage(this);
    }

    /// <summary>Field number for the "tenant" field.</summary>
    public const int TenantFieldNumber = 1;
    private pb::ByteString tenant_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Tenant {
      get { return tenant_; }
      set {
        tenant_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::Dolittle.Runtime.Events.Relativity.VersionedEventSourceMessage source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Dolittle.Runtime.Events.Relativity.VersionedEventSourceMessage Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 3;
    private ulong sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private pb::ByteString id_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 5;
    private long timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "correlationId" field.</summary>
    public const int CorrelationIdFieldNumber = 6;
    private pb::ByteString correlationId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CorrelationId {
      get { return correlationId_; }
      set {
        correlationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Dolittle.Runtime.Events.Relativity.EventParticleMessage> _repeated_events_codec
        = pb::FieldCodec.ForMessage(58, global::Dolittle.Runtime.Events.Relativity.EventParticleMessage.Parser);
    private readonly pbc::RepeatedField<global::Dolittle.Runtime.Events.Relativity.EventParticleMessage> events_ = new pbc::RepeatedField<global::Dolittle.Runtime.Events.Relativity.EventParticleMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dolittle.Runtime.Events.Relativity.EventParticleMessage> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommittedEventStreamParticleMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommittedEventStreamParticleMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tenant != other.Tenant) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (Sequence != other.Sequence) return false;
      if (Id != other.Id) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (CorrelationId != other.CorrelationId) return false;
      if(!events_.Equals(other.events_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tenant.Length != 0) hash ^= Tenant.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (Sequence != 0UL) hash ^= Sequence.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (CorrelationId.Length != 0) hash ^= CorrelationId.GetHashCode();
      hash ^= events_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tenant.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Tenant);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (Sequence != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Sequence);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Id);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TimeStamp);
      }
      if (CorrelationId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(CorrelationId);
      }
      events_.WriteTo(output, _repeated_events_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tenant.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Tenant);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (Sequence != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Sequence);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (CorrelationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CorrelationId);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommittedEventStreamParticleMessage other) {
      if (other == null) {
        return;
      }
      if (other.Tenant.Length != 0) {
        Tenant = other.Tenant;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          source_ = new global::Dolittle.Runtime.Events.Relativity.VersionedEventSourceMessage();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.Sequence != 0UL) {
        Sequence = other.Sequence;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.CorrelationId.Length != 0) {
        CorrelationId = other.CorrelationId;
      }
      events_.Add(other.events_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Tenant = input.ReadBytes();
            break;
          }
          case 18: {
            if (source_ == null) {
              source_ = new global::Dolittle.Runtime.Events.Relativity.VersionedEventSourceMessage();
            }
            input.ReadMessage(source_);
            break;
          }
          case 24: {
            Sequence = input.ReadUInt64();
            break;
          }
          case 34: {
            Id = input.ReadBytes();
            break;
          }
          case 40: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 50: {
            CorrelationId = input.ReadBytes();
            break;
          }
          case 58: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
